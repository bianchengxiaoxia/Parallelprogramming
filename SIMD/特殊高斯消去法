#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <map>
#include <windows.h>
#include <tmmintrin.h>
#include <xmmintrin.h>
#include <emmintrin.h>
#include <pmmintrin.h>
#include <smmintrin.h>
#include <nmmintrin.h>
#include <immintrin.h>

using namespace std;

const int maxsize = 3000;
const int maxrow = 3000; // 假设最多90000*90000的矩阵，3000列
const int numBasis = 90000;

long long head, tail, freq;

map<int, int*> iToBasis;
map<int, int> iToFirst;
map<int, int*> ans;

fstream RowFile("被消元行.txt", ios::in | ios::out);
fstream BasisFile("消元子.txt", ios::in | ios::out);

int gRows[maxrow][maxsize];   // 被消元行最多60000行，3000列
int gBasis[numBasis][maxsize];  // 消元子最多40000行，3000列

int ifBasis[numBasis] = { 0 };

// 重置所有数据结构
void reset() {
    memset(gRows, 0, sizeof(gRows));
    memset(gBasis, 0, sizeof(gBasis));
    memset(ifBasis, 0, sizeof(ifBasis));
    RowFile.clear();
    RowFile.seekg(0, ios::beg);
    BasisFile.clear();
    BasisFile.seekg(0, ios::beg);
    ans.clear();
}

// 读取消元子数据
void readBasis() {
    for (int i = 0; i < maxrow; i++) {
        if (BasisFile.eof()) {
            return;
        }
        string tmp;
        bool flag = false;
        int row = 0;
        getline(BasisFile, tmp);
        stringstream s(tmp);
        int pos;
        while (s >> pos) {
            if (!flag) {
                row = pos;
                flag = true;
                iToBasis.insert(pair<int, int*>(row, gBasis[row]));
            }
            int index = pos / 32;
            int offset = pos % 32;
            gBasis[row][index] = gBasis[row][index] | (1 << offset);
        }
    }
}

// 从特定位置读取被消元行
int readRowsFrom(int pos) {
    iToFirst.clear();
    RowFile.clear();
    RowFile.seekg(0, ios::beg);
    memset(gRows, 0, sizeof(gRows));
    string line;
    for (int i = 0; i < pos; i++) {
        getline(RowFile, line);
    }
    for (int i = pos; i < pos + maxsize; i++) {
        int tmp;
        getline(RowFile, line);
        if (line.empty()) {
            cout << "文件结束!" << endl;
            return i;
        }
        bool flag = false;
        stringstream s(line);
        while (s >> tmp) {
            if (!flag) {
                iToFirst.insert(pair<int, int>(i - pos, tmp));
            }
            int index = tmp / 32;
            int offset = tmp % 32;
            gRows[i - pos][index] = gRows[i - pos][index] | (1 << offset);
            flag = true;
        }
    }
    return -1;
}

// 更新首项位置
void update(int row) {
    bool flag = 0;
    for (int i = maxsize - 1; i >= 0; i--) {
        if (gRows[row][i] == 0)
            continue;
        else {
            if (!flag)
                flag = true;
            int pos = i * 32;
            int offset = 0;
            for (int k = 31; k >= 0; k--) {
                if (gRows[row][i] & (1 << k)) {
                    offset = k;
                    break;
                }
            }
            int newfirst = pos + offset;
            iToFirst.erase(row);
            iToFirst.insert(pair<int, int>(row, newfirst));
            break;
        }
    }
    if (!flag) {
        iToFirst.erase(row);
    }
    return;
}

// 写入结果到输出文件
void writeResult(ofstream& out) {
    for (auto it = ans.rbegin(); it != ans.rend(); it++) {
        int* result = it->second;
        int max = it->first / 32 + 1;
        for (int i = max; i >= 0; i--) {
            if (result[i] == 0)
                continue;
            int pos = i * 32;
            for (int k = 31; k >= 0; k--) {
                if (result[i] & (1 << k)) {
                    out << k + pos << " ";
                }
            }
        }
        out << endl;
    }
}

// 普通高斯消元
void GE() {
    int begin = 0;
    int flag;
    QueryPerformanceCounter((LARGE_INTEGER*)&head);
    while (true) {
        flag = readRowsFrom(begin);
        int num = (flag == -1) ? maxsize : flag;
        for (int i = 0; i < num; i++) {
            while (iToFirst.find(i) != iToFirst.end()) {
                int first = iToFirst.find(i)->second;
                if (iToBasis.find(first) != iToBasis.end()) {
                    int* basis = iToBasis.find(first)->second;
                    for (int j = 0; j < maxsize; j++) {
                        gRows[i][j] = gRows[i][j] ^ basis[j];
                    }
                    update(i);
                } else {
                    for (int j = 0; j < maxsize; j++) {
                        gBasis[first][j] = gRows[i][j];
                    }
                    iToBasis.insert(pair<int, int*>(first, gBasis[first]));
                    ans.insert(pair<int, int*>(first, gBasis[first]));
                    iToFirst.erase(i);
                }
            }
        }
        if (flag == -1)
            begin += maxsize;
        else
            break;
    }
    QueryPerformanceCounter((LARGE_INTEGER*)&tail);
}

// AVX优化的高斯消元
void AVX_GE() {
    int begin = 0;
    int flag;
    QueryPerformanceCounter((LARGE_INTEGER*)&head);
    while (true) {
        flag = readRowsFrom(begin);
        int num = (flag == -1) ? maxsize : flag;
        for (int i = 0; i < num; i++) {
            while (iToFirst.find(i) != iToFirst.end()) {
                int first = iToFirst.find(i)->second;
                if (iToBasis.find(first) != iToBasis.end()) {
                    int* basis = iToBasis.find(first)->second;
                    int j = 0;
                    for (; j + 8 < maxsize; j += 8) {
                        __m256i vij = _mm256_loadu_si256((__m256i*)&gRows[i][j]);
                        __m256i vj = _mm256_loadu_si256((__m256i*)&basis[j]);
                        __m256i vx = _mm256_xor_si256(vij, vj);
                        _mm256_storeu_si256((__m256i*)&gRows[i][j], vx);
                    }
                    for (; j < maxsize; j++) {
                        gRows[i][j] = gRows[i][j] ^ basis[j];
                    }
                    update(i);
                } else {
                    int j = 0;
                    for (; j + 8 < maxsize; j += 8) {
                        __m256i vij = _mm256_loadu_si256((__m256i*)&gRows[i][j]);
                        _mm256_storeu_si256((__m256i*)&gRows[first][j], vij);
                    }
                    for (; j < maxsize; j++) {
                        gBasis[first][j] = gRows[i][j];
                    }
                    iToBasis.insert(pair<int, int*>(first, gBasis[first]));
                    ans.insert(pair<int, int*>(first, gBasis[first]));
                    iToFirst.erase(i);
                }
            }
        }
        if (flag == -1)
            begin += maxsize;
        else
            break;
    }
    QueryPerformanceCounter((LARGE_INTEGER*)&tail);
}

// SSE优化的高斯消元
void SSE_GE() {
    int begin = 0;
    int flag;
    QueryPerformanceCounter((LARGE_INTEGER*)&head);
    while (true) {
        flag = readRowsFrom(begin);
        int num = (flag == -1) ? maxsize : flag;
        for (int i = 0; i < num; i++) {
            while (iToFirst.find(i) != iToFirst.end()) {
                int first = iToFirst.find(i)->second;
                if (iToBasis.find(first) != iToBasis.end()) {
                    int* basis = iToBasis.find(first)->second;
                    int j = 0;
                    for (; j + 4 < maxsize; j += 4) {
                        __m128i vij = _mm_loadu_si128((__m128i*)&gRows[i][j]);
                        __m128i vj = _mm_loadu_si128((__m128i*)&basis[j]);
                        __m128i vx = _mm_xor_si128(vij, vj);
                        _mm_storeu_si128((__m128i*)&gRows[i][j], vx);
                    }
                    for (; j < maxsize; j++) {
                        gRows[i][j] = gRows[i][j] ^ basis[j];
                    }
                    update(i);
                } else {
                    int j = 0;
                    for (; j + 4 < maxsize; j += 4) {
                        __m128i vij = _mm_loadu_si128((__m128i*)&gRows[i][j]);
                        _mm_storeu_si128((__m128i*)&gRows[first][j], vij);
                    }
                    for (; j < maxsize; j++) {
                        gBasis[first][j] = gRows[i][j];
                    }
                    iToBasis.insert(pair<int, int*>(first, gBasis[first]));
                    ans.insert(pair<int, int*>(first, gBasis[first]));
                    iToFirst.erase(i);
                }
            }
        }
        if (flag == -1)
            begin += maxsize;
        else
            break;
    }
    QueryPerformanceCounter((LARGE_INTEGER*)&tail);
}

int main() {
    double time1 = 0;
    double time2 = 0;
    double time3 = 0;

    for (int i = 0; i < 20; i++) {
        ofstream out("消元结果.txt");
        ofstream out1("消元结果(AVX).txt");
        ofstream out2("消元结果(SSE).txt");

        QueryPerformanceFrequency((LARGE_INTEGER*)&freq);
        readBasis();

        GE();
        cout << "普通高斯消元耗时: " << (tail - head) * 1000 / freq << " ms" << endl;
        time1 += (tail - head) * 1000 / freq;
        writeResult(out);
        reset();

        readBasis();
        AVX_GE();
        cout << "AVX优化高斯消元耗时: " << (tail - head) * 1000 / freq << " ms" << endl;
        time2 += (tail - head) * 1000 / freq;
        writeResult(out1);
        reset();

        readBasis();
        SSE_GE();
        cout << "SSE优化高斯消元耗时: " << (tail - head) * 1000 / freq << " ms" << endl;
        time3 += (tail - head) * 1000 / freq;
        writeResult(out2);
        reset();

        out.close();
        out1.close();
        out2.close();
    }

    cout << "平均普通高斯消元耗时: " << time1 / 5 << " ms" << endl;
    cout << "平均AVX优化高斯消元耗时: " << time2 / 5 << " ms" << endl;
    cout << "平均SSE优化高斯消元耗时: " << time3 / 5 << " ms" << endl;

    return 0;
}
